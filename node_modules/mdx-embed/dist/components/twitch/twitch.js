Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Twitch = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("../../utils");

var _generalObserver = require("../general-observer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Twitch = function Twitch(_ref) {
  var parent = _ref.parent,
      twitchId = _ref.twitchId,
      _ref$autoPlay = _ref.autoPlay,
      autoPlay = _ref$autoPlay === void 0 ? false : _ref$autoPlay,
      _ref$skipTo = _ref.skipTo,
      skipTo = _ref$skipTo === void 0 ? {
    h: 0,
    m: 0,
    s: 0
  } : _ref$skipTo,
      _ref$channel = _ref.channel,
      channel = _ref$channel === void 0 ? '' : _ref$channel,
      _ref$collection = _ref.collection,
      collection = _ref$collection === void 0 ? '' : _ref$collection;
  var h = skipTo.h,
      m = skipTo.m,
      s = skipTo.s;
  return /*#__PURE__*/_react["default"].createElement(_generalObserver.GeneralObserver, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "twitch-mdx-embed",
    style: _objectSpread({
      position: 'relative',
      width: '100%'
    }, (0, _utils.getPadding)('16:9'))
  }, /*#__PURE__*/_react["default"].createElement("iframe", {
    title: "twitch-".concat(twitchId),
    src: "https://player.twitch.tv/?autoplay=".concat(autoPlay, "&t=").concat(h, "h").concat(m, "m").concat(s, "s&video=v").concat(twitchId, "&channel=").concat(channel, "&collection=").concat(collection, "&parent=").concat(parent),
    frameBorder: "0",
    allow: "autoplay; fullscreen",
    allowFullScreen: true,
    style: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%'
    }
  })));
};

exports.Twitch = Twitch;